name: build 
on:
  push:
    branches: [master, rootless]
    
jobs:
  build:
    name: Build App
    runs-on: macOS-latest
    env:
      THEOS: theos

    steps:
    - name: Checkout
      uses: actions/checkout@master
      
    - name: Install Dependencies
      run: |
        brew install ldid xz make  # ← Added 'make' here
        
    - name: Install Modern GNU Make
      run: |
        # Install the latest GNU Make
        brew install make
        # Add GNU Make to PATH (takes precedence over system make)
        echo "$(brew --prefix make)/libexec/gnubin" >> $GITHUB_PATH
        
    - name: Set up Theos
      run: |
        export THEOS=~/theos
        [ -d "$THEOS" ] && (cd "$THEOS" && git pull --recurse-submodules) || git clone --recursive https://github.com/theos/theos.git "$THEOS"
        echo "THEOS=$THEOS" >> $GITHUB_ENV
        echo "$THEOS/bin" >> $GITHUB_PATH

    - name: Cache OpenCV
      uses: actions/cache@v3
      id: opencv-cache
      with:
        path: frameworks/opencv2.framework
        key: ${{ runner.os }}-opencv-${{ hashFiles('build.yml') }}
        restore-keys: |
          ${{ runner.os }}-opencv-

    - name: Checkout OpenCV (if not cached)
      if: steps.opencv-cache.outputs.cache-hit != 'true'
      run: |
        git clone --branch 4.x --depth 1 https://github.com/opencv/opencv.git opencv-repo
        
    - name: Build OpenCV Framework (if not cached)
      if: steps.opencv-cache.outputs.cache-hit != 'true'
      run: |
        cd opencv-repo
        python3 platforms/ios/build_framework.py ios \
          --iphoneos_archs "arm64,arm64e" \
          --iphoneos_deployment_target "15.0" \
          --disable-bitcode \
          --static \
          --build_only_specified_archs \
          --legacy_build
        mkdir -p ../frameworks
        cp -R ios/opencv2.framework ../frameworks/
       
    - name: Install Theos Headers
      run: |
        git clone --depth=1 https://github.com/theos/headers.git /tmp/theos-headers
        mkdir -p ~/theos/vendor/include
        cp -R /tmp/theos-headers/* ~/theos/vendor/include/
        
    - name: Download iOS 16.1 SDK (Rootless Compatible)
      run: |
        # Create the sdks directory if it doesn't exist
        mkdir -p ~/theos/sdks
        curl -L -o ios-sdk.zip "https://github.com/xybp888/iOS-SDKs/releases/download/iOS-SDKs/iPhoneOS16.1.sdk.zip"
        unzip ios-sdk.zip -d ~/theos/sdks/
        rm -rf ios-sdk.zip
        
    - name: Set Rootless Build Environment
      run: |
        echo "THEOS_PACKAGE_SCHEME=rootless" >> $GITHUB_ENV
        
    - name: Use Substrate compatibility
      run: |
        # Disable libhooker and ellekit to use default Substrate
        echo "THEOS_USE_LIBHOOKER=0" >> $GITHUB_ENV
        echo "TWEAK_USE_ELLEKIT=0" >> $GITHUB_ENV
    
    - name: Build Package
      id: build_package
      run: |
        make package FINALPACKAGE=1
        echo "::set-output name=package::$(ls -t packages | head -n1)"

    - name: List Built Packages
      run: |
        echo "Built packages:"
        ls -la packages/
        echo ""
        echo "File details:"
        file packages/*

    - name: Verify Final Binaries
      run: |
        # Extract and check all in one go
        mkdir -p /tmp/verify
        dpkg -x packages/*.deb /tmp/verify
        
        # Array of binaries to check
        binaries=(
          "/tmp/verify/var/jb/usr/bin/zxtouchb"
          "/tmp/verify/var/jb/Library/MobileSubstrate/DynamicLibraries/appdelegate.dylib"
          "/tmp/verify/var/jb/Library/MobileSubstrate/DynamicLibraries/pccontrol.dylib"
        )
        
        for binary in "${binaries[@]}"; do
          if [ -f "$binary" ]; then
            echo "=== Checking: $(basename $binary) ==="
            ldid -e "$binary"
            codesign -dv --verbose=4 "$binary"
            lipo -info "$binary"
            file "$binary"
            echo ""
          else
            echo "❌ Missing: $binary"
          fi
        done
        echo "✅ All verification checks completed"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: build-${{ github.run_number }}
        release_name: Build ${{ github.run_number }}
        draft: false
        prerelease: false
                            
    - name: Upload All Packages
      uses: svenstaro/upload-release-action@v2
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: packages/*.deb
        file_glob: true
        tag: build-${{ github.run_number }}
        overwrite: true