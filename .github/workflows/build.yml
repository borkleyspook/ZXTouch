name: build 
on:
  push:
    branches: [master, rootless]
    
permissions:
  actions: read
  contents: write
  
jobs:
  build:
    name: Build App
    runs-on: macOS-latest
    env:
      THEOS: theos

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Install Dependencies
      run: |
        brew install ldid xz make  # ← Added 'make' here
        
    - name: Install Modern GNU Make
      run: |
        # Install the latest GNU Make
        brew install make
        # Add GNU Make to PATH (takes precedence over system make)
        echo "$(brew --prefix make)/libexec/gnubin" >> $GITHUB_PATH
        
    - name: Set up Theos
      run: |
        export THEOS=~/theos
        [ -d "$THEOS" ] && (cd "$THEOS" && git pull --recurse-submodules) || git clone --recursive https://github.com/theos/theos.git "$THEOS"
        echo "THEOS=$THEOS" >> $GITHUB_ENV
        echo "$THEOS/bin" >> $GITHUB_PATH

    - name: Cache OpenCV
      uses: actions/cache@v4
      id: opencv-cache
      with:
        path: frameworks/opencv2.framework
        key: ${{ runner.os }}-opencv-${{ hashFiles('build.yml') }}
        restore-keys: |
          ${{ runner.os }}-opencv-

    - name: Checkout OpenCV (if not cached)
      if: steps.opencv-cache.outputs.cache-hit != 'true'
      run: |
        git clone --branch 4.x --depth 1 https://github.com/opencv/opencv.git opencv-repo
        
    - name: Build OpenCV Framework (if not cached)
      if: steps.opencv-cache.outputs.cache-hit != 'true'
      run: |
        cd opencv-repo
        python3 platforms/ios/build_framework.py ios \
          --iphoneos_archs "arm64,arm64e" \
          --iphoneos_deployment_target "15.0" \
          --disable-bitcode \
          --static \
          --build_only_specified_archs \
          --legacy_build
        mkdir -p ../frameworks
        cp -R ios/opencv2.framework ../frameworks/
       
    - name: Install Theos Headers
      run: |
        git clone --depth=1 https://github.com/theos/headers.git /tmp/theos-headers
        mkdir -p ~/theos/vendor/include
        cp -R /tmp/theos-headers/* ~/theos/vendor/include/
        
    - name: Download iOS 16.1 SDK (Rootless Compatible)
      run: |
        # Create the sdks directory if it doesn't exist
        mkdir -p ~/theos/sdks
        curl -L -o ios-sdk.zip "https://github.com/xybp888/iOS-SDKs/releases/download/iOS-SDKs/iPhoneOS16.1.sdk.zip"
        unzip ios-sdk.zip -d ~/theos/sdks/
        rm -rf ios-sdk.zip
        
    - name: Set Rootless Build Environment
      run: |
        echo "THEOS_PACKAGE_SCHEME=rootless" >> $GITHUB_ENV
        
    - name: Use Substrate compatibility
      run: |
        # Disable libhooker and ellekit to use default Substrate
        echo "THEOS_USE_LIBHOOKER=0" >> $GITHUB_ENV
        echo "TWEAK_USE_ELLEKIT=0" >> $GITHUB_ENV
    
    - name: Build Package
      id: build_package
      run: |
        # Capture build output to a log file
        make package FINALPACKAGE=1 2>&1 | tee build_output.log
        echo "package=$(ls -t packages/*.deb | head -n1 | xargs basename)" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: build-${{ github.run_number }}
        release_name: Build ${{ github.run_number }}
        draft: false
        prerelease: false
                            
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}          
        asset_path: ./packages/${{ steps.build_package.outputs.package }}
        asset_name: ${{ steps.build_package.outputs.package }}
        asset_content_type: application/vnd.debian.binary-package
        
    - name: Capture and upload build logs
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs
        path: |
          build_output.log
          ${{ github.workspace }}/**/*.log
        retention-days: 1

  # LOG PROCESSING JOB - RUNS NO MATTER WHAT
  process-logs:
    name: Process Build Logs
    needs: [build]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build logs
        uses: actions/download-artifact@v4
        with:
          name: build-logs
          path: ./logs

      - name: Process and filter log
        run: |
          echo "## LOG PROCESSING ##"
          echo "Build conclusion: ${{ needs.build.result }}"
          
          # Check if we have the main build output log
          if [ -f "logs/build_output.log" ]; then
            echo "Using build_output.log"
            cp logs/build_output.log raw_log.txt
          else
            # Try to find any log file
            echo "Looking for any log files..."
            ANY_LOG=$(find logs -type f -name "*.log" | head -1)
            if [ -n "$ANY_LOG" ] && [ -f "$ANY_LOG" ]; then
              echo "Using found log: $ANY_LOG"
              cp "$ANY_LOG" raw_log.txt
            else
              echo "No log files found, creating placeholder"
              echo "Build completed with status: ${{ needs.build.result }}" > raw_log.txt
              echo "Run ID: ${{ github.run_id }}" >> raw_log.txt
              echo "No detailed logs were captured" >> raw_log.txt
            fi
          fi
          
          # Filter for important information
          grep -E -i \
            "##\[(warning|error)\]|Error:|error:|FAIL|FAILED|Exception|fatal:|##\[group\]|##\[endgroup\]|==>|🍺|Cache|Switched|Initialized|Cloning|Downloading|curl|unzip|make:|ldid:|brew install|THEOS|SDK|framework" \
            raw_log.txt > filtered_log.txt || echo "No matches found" > filtered_log.txt
          
          # Add header and summary
          echo "## STRIPPED BUILD LOG ##" > stripped_log.txt
          echo "Workflow: ${{ github.workflow }}" >> stripped_log.txt
          echo "Run ID: ${{ github.run_id }}" >> stripped_log.txt
          echo "Run Number: ${{ github.run_number }}" >> stripped_log.txt
          echo "Status: ${{ needs.build.result }}" >> stripped_log.txt
          echo "Branch: ${{ github.ref_name }}" >> stripped_log.txt
          echo "Commit: ${{ github.sha }}" >> stripped_log.txt
          echo "Triggered by: ${{ github.event_name }}" >> stripped_log.txt
          echo "=========================" >> stripped_log.txt
          cat filtered_log.txt >> stripped_log.txt
          
          # Add final result
          echo "" >> stripped_log.txt
          echo "## FINAL RESULT ##" >> stripped_log.txt
          tail -20 raw_log.txt >> stripped_log.txt 2>/dev/null || echo "No tail available" >> stripped_log.txt

      - name: Upload processed log
        uses: actions/upload-artifact@v4
        with:
          name: processed-build-log-${{ github.run_number }}
          path: stripped_log.txt
          retention-days: 7